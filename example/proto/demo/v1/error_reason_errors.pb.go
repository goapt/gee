// Code generated by protoc-gen-go-errors. DO NOT EDIT.

package demo

import (
	fmt "fmt"
	errors "github.com/goapt/gee/errors"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the gee package it is being compiled against.
const _ = errors.SupportPackageIsVersion1

func IsInvalidParameter(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_InvalidParameter.String() && e.Code == 400
}

func ErrorInvalidParameter(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_InvalidParameter.String(), fmt.Sprintf(format, args...))
}

func IsAccessForbidden(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_AccessForbidden.String() && e.Code == 403
}

func ErrorAccessForbidden(format string, args ...interface{}) *errors.Error {
	return errors.New(403, ErrorReason_AccessForbidden.String(), fmt.Sprintf(format, args...))
}

func IsUnauthenticated(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_Unauthenticated.String() && e.Code == 401
}

func ErrorUnauthenticated(format string, args ...interface{}) *errors.Error {
	return errors.New(401, ErrorReason_Unauthenticated.String(), fmt.Sprintf(format, args...))
}

func IsRateLimited(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_RateLimited.String() && e.Code == 429
}

func ErrorRateLimited(format string, args ...interface{}) *errors.Error {
	return errors.New(429, ErrorReason_RateLimited.String(), fmt.Sprintf(format, args...))
}

func IsSystemError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_SystemError.String() && e.Code == 500
}

func ErrorSystemError(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_SystemError.String(), fmt.Sprintf(format, args...))
}

func IsNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_NotFound.String() && e.Code == 400
}

func ErrorNotFound(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_NotFound.String(), fmt.Sprintf(format, args...))
}

func IsForbidden(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_Forbidden.String() && e.Code == 403
}

func ErrorForbidden(format string, args ...interface{}) *errors.Error {
	return errors.New(403, ErrorReason_Forbidden.String(), fmt.Sprintf(format, args...))
}
