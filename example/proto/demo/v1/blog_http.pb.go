// Code generated by protoc-gen-go-gee-http. DO NOT EDIT.
// versions:
// protoc-gen-go-gee-http v1.0.0

package demo

import (
	context "context"
	gee "github.com/goapt/gee"
	errors "github.com/goapt/gee/errors"
	http "net/http"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the gee package it is being compiled against.
// context.gee.http.errors.

type BlogServiceHTTPServer interface {
	Create(context.Context, *CreateArticleRequest) (*CreateArticleResponse, error)
	DeleteArticle(context.Context, *DeleteArticleRequest) (*DeleteArticleResponse, error)
	GetArticle(context.Context, *GetArticleRequest) (*GetArticleResponse, error)
	ListArticle(context.Context, *ListArticleRequest) (*ListArticleResponse, error)
	UpdateArticle(context.Context, *UpdateArticleRequest) (*UpdateArticleResponse, error)
}

type BlogService struct {
	server      BlogServiceHTTPServer
	router      gee.Router
	middlewares []gee.Handler
}

func (r *BlogService) RegisterService() {
	r.router.POST("/article/", append(r.middlewares, r.Create)...)
	r.router.PUT("/article/", append(r.middlewares, r.UpdateArticle)...)
	r.router.DELETE("/article/", append(r.middlewares, r.DeleteArticle)...)
	r.router.GET("/article/", append(r.middlewares, r.GetArticle)...)
	r.router.GET("/article/list", append(r.middlewares, r.ListArticle)...)
}

func (r *BlogService) Validate(in any) error {
	if v, ok := in.(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return err
		}
	}
	return nil
}

func RegisterBlogServiceHTTPServer(r gee.Router, srv BlogServiceHTTPServer, middlewares ...gee.Handler) {
	s := &BlogService{
		server:      srv,
		router:      r,
		middlewares: middlewares,
	}
	s.RegisterService()
}

func (r *BlogService) Create(c *gee.Context) error {
	var in CreateArticleRequest
	if err := c.ShouldBindJSON(&in); err != nil {
		return errors.BadRequest("InvalidParameter", err.Error())
	}

	if err := r.Validate(&in); err != nil {
		return errors.BadRequest("InvalidParameter", err.Error())
	}

	out, err := r.server.Create(c.Request.Context(), &in)
	if err != nil {
		return err
	}
	return c.JSON(out)
}

func (r *BlogService) UpdateArticle(c *gee.Context) error {
	var in UpdateArticleRequest
	if err := c.ShouldBindJSON(&in); err != nil {
		return errors.BadRequest("InvalidParameter", err.Error())
	}

	if err := r.Validate(&in); err != nil {
		return errors.BadRequest("InvalidParameter", err.Error())
	}

	out, err := r.server.UpdateArticle(c.Request.Context(), &in)
	if err != nil {
		return err
	}
	return c.JSON(out)
}

func (r *BlogService) DeleteArticle(c *gee.Context) error {
	var in DeleteArticleRequest
	if err := c.ShouldBindQuery(&in); err != nil {
		return errors.BadRequest("InvalidParameter", err.Error())
	}

	if err := r.Validate(&in); err != nil {
		return errors.BadRequest("InvalidParameter", err.Error())
	}

	out, err := r.server.DeleteArticle(c.Request.Context(), &in)
	if err != nil {
		return err
	}
	return c.JSON(out)
}

func (r *BlogService) GetArticle(c *gee.Context) error {
	var in GetArticleRequest
	if err := c.ShouldBindQuery(&in); err != nil {
		return errors.BadRequest("InvalidParameter", err.Error())
	}

	if err := r.Validate(&in); err != nil {
		return errors.BadRequest("InvalidParameter", err.Error())
	}

	out, err := r.server.GetArticle(c.Request.Context(), &in)
	if err != nil {
		return err
	}
	return c.JSON(out)
}

func (r *BlogService) ListArticle(c *gee.Context) error {
	var in ListArticleRequest
	if err := c.ShouldBindQuery(&in); err != nil {
		return errors.BadRequest("InvalidParameter", err.Error())
	}

	if err := r.Validate(&in); err != nil {
		return errors.BadRequest("InvalidParameter", err.Error())
	}

	out, err := r.server.ListArticle(c.Request.Context(), &in)
	if err != nil {
		return err
	}
	return c.JSON(out)
}

type BlogServiceHTTPClient interface {
	Create(ctx context.Context, req *CreateArticleRequest) (rsp *CreateArticleResponse, err error)
	DeleteArticle(ctx context.Context, req *DeleteArticleRequest) (rsp *DeleteArticleResponse, err error)
	GetArticle(ctx context.Context, req *GetArticleRequest) (rsp *GetArticleResponse, err error)
	ListArticle(ctx context.Context, req *ListArticleRequest) (rsp *ListArticleResponse, err error)
	UpdateArticle(ctx context.Context, req *UpdateArticleRequest) (rsp *UpdateArticleResponse, err error)
}

type BlogServiceHTTPClientImpl struct {
	cc *gee.Client
}

func (c *BlogServiceHTTPClientImpl) Validate(in any) error {
	if v, ok := in.(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return err
		}
	}
	return nil
}

func NewBlogServiceHTTPClient(httpClient *http.Client, endpoint string, options ...gee.ClientOption) BlogServiceHTTPClient {
	client := gee.NewClient(httpClient, endpoint, options...)

	return &BlogServiceHTTPClientImpl{
		cc: client,
	}
}

func (c *BlogServiceHTTPClientImpl) Create(ctx context.Context, in *CreateArticleRequest) (*CreateArticleResponse, error) {
	var out CreateArticleResponse
	path := "/article/"

	if err := c.Validate(&in); err != nil {
		return nil, errors.BadRequest("InvalidParameter", err.Error())
	}

	err := c.cc.Invoke(ctx, "POST", path, in, &out)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BlogServiceHTTPClientImpl) DeleteArticle(ctx context.Context, in *DeleteArticleRequest) (*DeleteArticleResponse, error) {
	var out DeleteArticleResponse
	path := "/article/"

	if err := c.Validate(&in); err != nil {
		return nil, errors.BadRequest("InvalidParameter", err.Error())
	}

	err := c.cc.Invoke(ctx, "DELETE", path, in, &out)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BlogServiceHTTPClientImpl) GetArticle(ctx context.Context, in *GetArticleRequest) (*GetArticleResponse, error) {
	var out GetArticleResponse
	path := "/article/"

	if err := c.Validate(&in); err != nil {
		return nil, errors.BadRequest("InvalidParameter", err.Error())
	}

	err := c.cc.Invoke(ctx, "GET", path, in, &out)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BlogServiceHTTPClientImpl) ListArticle(ctx context.Context, in *ListArticleRequest) (*ListArticleResponse, error) {
	var out ListArticleResponse
	path := "/article/list"

	if err := c.Validate(&in); err != nil {
		return nil, errors.BadRequest("InvalidParameter", err.Error())
	}

	err := c.cc.Invoke(ctx, "GET", path, in, &out)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BlogServiceHTTPClientImpl) UpdateArticle(ctx context.Context, in *UpdateArticleRequest) (*UpdateArticleResponse, error) {
	var out UpdateArticleResponse
	path := "/article/"

	if err := c.Validate(&in); err != nil {
		return nil, errors.BadRequest("InvalidParameter", err.Error())
	}

	err := c.cc.Invoke(ctx, "PUT", path, in, &out)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
